import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:login_form/aboutscreen.dart';
import 'package:login_form/main.dart';
import 'package:login_form/mood_category.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'change_password_screen.dart';
import 'editprofilescreen.dart';
import 'package:location/location.dart' as loc;
import 'package:geocoding/geocoding.dart' as geocoding;
import 'package:geolocator/geolocator.dart';

// Bar class to store data for each bar
class Bar {
  final String name;
  final String description;
  final String imageUrl;
  final String address;
  final String operatingHours;
  final List<String> features;
  final String contactNumber;
  final LatLng? location;
  final double rating;
  final int reviewCount;

  Bar({
    required this.name,
    required this.description,
    required this.imageUrl,
    required this.address,
    required this.operatingHours,
    required this.features,
    required this.contactNumber,
    this.location,
    this.rating = 0.0,
    this.reviewCount = 0,
  });
}

class DashboardScreen extends StatefulWidget {
  final List<String>? selectedFeatures;

  const DashboardScreen({
    Key? key,
    this.selectedFeatures,
  }) : super(key: key);

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  String username = ''; // Default username
  String userEmail = ''; // Default user email
  File? _imageFile; // User profile picture file
  String? _profileImagePath;
  DateTime? _lastProfileUpdate;
  GoogleMapController? mapController;

  // Location Controller
  loc.Location _locationController = loc.Location();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  Set<Marker> _markers = {};
  bool _isLoading = true;
  List<String>? _selectedFeatures;

  // Initial camera position (Ipil, Zamboanga Sibugay - centered on downtown)
  static const CameraPosition _kGooglePlex = CameraPosition(
    target: LatLng(7.7844, 122.5872), // Ipil downtown coordinates
    zoom: 16, // Adjusted zoom to show more of the town
  );

  // Add this field
  String displayName = '';

  String _searchQuery = '';
  List<DocumentSnapshot> _bars = [];
  List<DocumentSnapshot> _searchResults = [];

  void onMapCreated(GoogleMapController controller) async {
    setState(() {
      mapController = controller;
    });
    // Load approved bars and their markers
    await _loadApprovedBars();
  }

  void _onSearch(String query) async {
    if (query.isEmpty) {
      setState(() {
        _searchResults = [];
      });
      return;
    }

    QuerySnapshot snapshot = await FirebaseFirestore.instance
        .collection('bars')
        .where('name', isGreaterThanOrEqualTo: query)
        .where('name', isLessThanOrEqualTo: query + '\uf8ff')
        .get();

    setState(() {
      _searchResults = snapshot.docs;
    });
  }

  void _showAllMarkers() {
    if (_markers.isEmpty || mapController == null) return;

    LatLngBounds bounds = _getBounds(_markers);
    mapController!.animateCamera(
      CameraUpdate.newLatLngBounds(bounds, 100),
    );
  }

  @override
  void initState() {
    super.initState();
    _selectedFeatures = widget.selectedFeatures;
    _loadUserData();
    _setupUserListener(); // Add user listener
    getUserLocationUpdates();
    _loadApprovedBars(); // Load approved bars after initialization
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _showAllMarkers(); // Add marker after frame is built
    });
  }

  @override
  void dispose() {
    _userSubscription?.cancel(); // Cancel subscription
    super.dispose();
  }

  // Setup real-time user data listener
  StreamSubscription<DocumentSnapshot<Map<String, dynamic>>>? _userSubscription;

  void _setupUserListener() {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      _userSubscription = FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .snapshots()
          .listen((DocumentSnapshot<Map<String, dynamic>> snapshot) {
        if (snapshot.exists) {
          setState(() {
            displayName =
                snapshot.data()?['name'] ?? _formatEmailToName(userEmail);
            username = displayName;

            // Update profile picture if changed
            String? profilePicUrl = snapshot.data()?['profileImagePath'];
            String? lastUpdateStr = snapshot.data()?['profileImageLastUpdated'];

            if (profilePicUrl != null && lastUpdateStr != null) {
              final lastUpdate = DateTime.parse(lastUpdateStr);

              // Only update if we have a new image or if this is a fresh load
              if (_profileImagePath != profilePicUrl ||
                  _lastProfileUpdate == null ||
                  lastUpdate.isAfter(_lastProfileUpdate!)) {
                _profileImagePath = profilePicUrl;
                _lastProfileUpdate = lastUpdate;
                _loadProfilePicture(profilePicUrl);
              }
            }
          });
        }
      });
    }
  }

  Future<void> _loadProfilePicture(String path) async {
    try {
      final file = File(path);
      if (await file.exists()) {
        if (mounted) {
          setState(() => _imageFile = file);
        }
      }
    } catch (e) {
      print('Error loading profile picture: $e');
    }
  }

  Future<void> _loadApprovedBars() async {
    setState(() => _isLoading = true);
    try {
      // Get all approved bars from Firestore
      var query = FirebaseFirestore.instance
          .collection('bars')
          .where('status', isEqualTo: 'approved');

      final QuerySnapshot barSnapshot = await query.get();

      List<Bar> loadedBars = [];
      Set<Marker> newMarkers = {};

      for (var doc in barSnapshot.docs) {
        final data = doc.data() as Map<String, dynamic>;

        // Get bar features
        List<String> barFeatures = List<String>.from(data['features'] ?? []);

        // Skip this bar if it doesn't match user preferences
        if (_selectedFeatures != null && _selectedFeatures!.isNotEmpty) {
          bool hasMatchingFeature = false;
          for (String feature in _selectedFeatures!) {
            if (barFeatures.contains(feature)) {
              hasMatchingFeature = true;
              break;
            }
          }
          if (!hasMatchingFeature) continue;
        }

        // Construct full address
        String fullAddress = [
          data['streetAddress'] ?? '',
          data['barangay'] ?? '',
          data['municipality'] ?? '',
          data['province'] ?? '',
        ].where((part) => part.isNotEmpty).join(', ');

        // Get location data
        GeoPoint? geoPoint = data['location'] as GeoPoint?;
        LatLng? location;
        if (geoPoint != null) {
          location = LatLng(geoPoint.latitude, geoPoint.longitude);
        }

        // Create Bar object from Firestore data
        Bar bar = Bar(
          name: data['barName'] ?? '',
          description: data['description'] ?? 'No description available',
          imageUrl: data['profileImagePath'] ?? 'assets/default_bar.jpg',
          address: fullAddress,
          operatingHours: data['operatingHours'] ?? 'Hours not specified',
          features: barFeatures,
          contactNumber: data['contactNumber'] ?? '',
          location: location,
          rating: (data['rating'] ?? 0.0).toDouble(),
          reviewCount: (data['reviewCount'] ?? 0) as int,
        );

        if (location != null) {
          // Create marker for the bar
          final marker = Marker(
            markerId: MarkerId(doc.id),
            position: location,
            infoWindow: InfoWindow(title: bar.name),
            icon:
                BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
            onTap: () {
              showDialog(
                context: context,
                builder: (context) => Dialog(
                  backgroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Container(
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Header with close button
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              bar.name,
                              style: const TextStyle(
                                fontSize: 24,
                                fontWeight: FontWeight.w600,
                                fontFamily: 'Handlee',
                              ),
                            ),
                            IconButton(
                              icon: const Icon(Icons.close),
                              onPressed: () => Navigator.pop(context),
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        // Description
                        Text(
                          bar.description,
                          style: const TextStyle(
                            fontSize: 16,
                            color: Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 12),
                        // Address
                        Text(
                          'Address: ${bar.address}',
                          style: const TextStyle(
                            fontSize: 14,
                            color: Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 8),
                        // Hours
                        Text(
                          'Hours: ${bar.operatingHours}',
                          style: const TextStyle(
                            fontSize: 14,
                            color: Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 8),
                        // Contact
                        Text(
                          'Contact: ${bar.contactNumber}',
                          style: const TextStyle(
                            fontSize: 14,
                            color: Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 16),
                        // Features
                        Wrap(
                          spacing: 8,
                          runSpacing: 8,
                          children: bar.features.map((feature) {
                            return Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 8,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.blue.shade50,
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: Text(
                                feature,
                                style: const TextStyle(
                                  fontSize: 14,
                                  color: Colors.black87,
                                ),
                              ),
                            );
                          }).toList(),
                        ),
                        const SizedBox(height: 20),
                        // Get Directions Button
                        SizedBox(
                          width: double.infinity,
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.blue,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(vertical: 12),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(25),
                              ),
                            ),
                            onPressed: () {
                              Navigator.pop(context);
                              if (bar.location != null) {
                                _showDirectionsDialog(bar.location!, bar.name);
                              }
                            },
                            child: const Text(
                              'Get Directions',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          );
          newMarkers.add(marker);
        } else if (data['streetAddress'] != null &&
            data['streetAddress'].isNotEmpty) {
          try {
            String address = [
              data['streetAddress'],
              data['barangay'],
              data['municipality'],
              data['province'],
            ].where((part) => part != null && part.isNotEmpty).join(', ');

            List<geocoding.Location> locations =
                await geocoding.locationFromAddress(address);

            if (locations.isNotEmpty) {
              Bar bar = Bar(
                name: data['barName'] ?? '',
                description: data['description'] ?? 'No description available',
                imageUrl: data['profileImagePath'] ?? 'assets/default_bar.jpg',
                address: address,
                operatingHours: data['operatingHours'] ?? 'Hours not specified',
                features: List<String>.from(data['features'] ?? []),
                contactNumber: data['contactNumber'] ?? '',
                location:
                    LatLng(locations.first.latitude, locations.first.longitude),
                rating: (data['rating'] ?? 0.0).toDouble(),
                reviewCount: (data['reviewCount'] ?? 0) as int,
              );
              _addMarkerForBar(bar);
            }
          } catch (e) {
            print('Error geocoding address for ${data['barName']}: $e');
          }
        }

        loadedBars.add(bar);
      }

      if (mounted) {
        setState(() {
          _markers = newMarkers;
          _isLoading = false;
        });

        // Show all markers on the map
        if (newMarkers.isNotEmpty) {
          _showAllMarkers();
        }
      }
    } catch (e) {
      print('Error loading approved bars: $e');
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  LatLngBounds _getBounds(Set<Marker> markers) {
    if (markers.isEmpty) {
      return LatLngBounds(
        southwest: const LatLng(7.7844, 122.5872),
        northeast: const LatLng(7.7844, 122.5872),
      );
    }

    double minLat = markers.first.position.latitude;
    double maxLat = markers.first.position.latitude;
    double minLng = markers.first.position.longitude;
    double maxLng = markers.first.position.longitude;

    for (Marker marker in markers) {
      if (marker.position.latitude < minLat) minLat = marker.position.latitude;
      if (marker.position.latitude > maxLat) maxLat = marker.position.latitude;
      if (marker.position.longitude < minLng)
        minLng = marker.position.longitude;
      if (marker.position.longitude > maxLng)
        maxLng = marker.position.longitude;
    }

    return LatLngBounds(
      southwest: LatLng(minLat - 0.01, minLng - 0.01), // Add padding
      northeast: LatLng(maxLat + 0.01, maxLng + 0.01), // Add padding
    );
  }

  Future<void> _launchMapsUrl(LatLng destination, String mode) async {
    final currentLocation = await _getCurrentLocation();
    if (currentLocation == null) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Unable to get your current location')),
        );
      }
      return;
    }

    final origin = '${currentLocation.latitude},${currentLocation.longitude}';
    final dest = '${destination.latitude},${destination.longitude}';
    final modeParam = mode == 'drive'
        ? 'driving'
        : mode == 'motor'
            ? 'driving'
            : 'walking';

    final url = Uri.parse(
        'https://www.google.com/maps/dir/?api=1&origin=$origin&destination=$dest&travelmode=$modeParam');

    try {
      if (await canLaunchUrl(url)) {
        await launchUrl(url);
      } else {
        throw 'Could not launch maps';
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Could not open maps application')),
        );
      }
    }
  }

  Future<LatLng?> _getCurrentLocation() async {
    try {
      final position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high);
      return LatLng(position.latitude, position.longitude);
    } catch (e) {
      print('Error getting current location: $e');
      return null;
    }
  }

  void _showDirectionsDialog(LatLng destination, String barName) {
    showDialog(
      context: context,
      builder: (BuildContext context) => AlertDialog(
        title: Text('Get Directions to $barName'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.directions_walk),
              title: const Text('Walk there'),
              onTap: () {
                Navigator.pop(context);
                _launchMapsUrl(destination, 'walking');
              },
            ),
            ListTile(
              leading: const Icon(Icons.directions_car),
              title: const Text('Drive there'),
              onTap: () {
                Navigator.pop(context);
                _launchMapsUrl(destination, 'drive');
              },
            ),
            ListTile(
              leading: const Icon(Icons.motorcycle),
              title: const Text('Ride there'),
              onTap: () {
                Navigator.pop(context);
                _launchMapsUrl(destination, 'motor');
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            child: const Text('Cancel'),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
    );
  }

  LatLng? _currentPosition;

  Future<void> _initializeLocations() async {
    try {
      _markers.clear();

      var snapshot = await FirebaseFirestore.instance
          .collection('bars')
          .where('status', isEqualTo: 'approved')
          .get();

      for (var doc in snapshot.docs) {
        try {
          final data = doc.data();
          GeoPoint? geoPoint = data['location'] as GeoPoint?;

          if (geoPoint != null) {
            String fullAddress = [
              data['streetAddress'] ?? '',
              data['barangay'] ?? '',
              data['municipality'] ?? '',
              data['province'] ?? '',
            ].where((part) => part.isNotEmpty).join(', ');

            Bar bar = Bar(
              name: data['barName'] ?? '',
              description: data['description'] ?? 'No description available',
              imageUrl: data['profileImagePath'] ?? 'assets/default_bar.jpg',
              address: fullAddress,
              operatingHours: data['operatingHours'] ?? 'Hours not specified',
              features: List<String>.from(data['features'] ?? []),
              contactNumber: data['contactNumber'] ?? '',
              location: LatLng(geoPoint.latitude, geoPoint.longitude),
              rating: (data['rating'] ?? 0.0).toDouble(),
              reviewCount: (data['reviewCount'] ?? 0) as int,
            );

            _addMarkerForBar(bar);
          } else if (data['streetAddress'] != null &&
              data['streetAddress'].isNotEmpty) {
            try {
              String address = [
                data['streetAddress'],
                data['barangay'],
                data['municipality'],
                data['province'],
              ].where((part) => part != null && part.isNotEmpty).join(', ');

              List<geocoding.Location> locations =
                  await geocoding.locationFromAddress(address);

              if (locations.isNotEmpty) {
                Bar bar = Bar(
                  name: data['barName'] ?? '',
                  description:
                      data['description'] ?? 'No description available',
                  imageUrl:
                      data['profileImagePath'] ?? 'assets/default_bar.jpg',
                  address: address,
                  operatingHours:
                      data['operatingHours'] ?? 'Hours not specified',
                  features: List<String>.from(data['features'] ?? []),
                  contactNumber: data['contactNumber'] ?? '',
                  location: LatLng(
                      locations.first.latitude, locations.first.longitude),
                  rating: (data['rating'] ?? 0.0).toDouble(),
                  reviewCount: (data['reviewCount'] ?? 0) as int,
                );
                _addMarkerForBar(bar);
              }
            } catch (e) {
              print('Error geocoding address for ${data['barName']}: $e');
            }
          }
        } catch (e) {
          print('Error processing bar document ${doc.id}: $e');
          continue;
        }
      }

      if (_markers.isNotEmpty && mapController != null) {
        _fitBoundsForMarkers();
      }

      if (mounted) {
        setState(() {});
      }
    } catch (e) {
      print('Error initializing locations: $e');
    }
  }

  void _addMarkerForBar(Bar bar) {
    if (bar.location == null) return;

    setState(() {
      _markers.add(
        Marker(
          markerId: MarkerId(bar.name),
          position: bar.location!,
          infoWindow: InfoWindow(
            title: bar.name,
            snippet: bar.description.length > 50
                ? '${bar.description.substring(0, 47)}...'
                : bar.description,
          ),
          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
          onTap: () {
            if (bar.location != null) {
              _showDirectionsDialog(bar.location!, bar.name);
            }
          },
        ),
      );
    });
  }

  void _centerOnUserLocation() async {
    try {
      final loc.LocationData? currentLocation =
          await _locationController.getLocation();
      if (currentLocation != null && mapController != null && mounted) {
        mapController!.animateCamera(
          CameraUpdate.newCameraPosition(
            CameraPosition(
              target:
                  LatLng(currentLocation.latitude!, currentLocation.longitude!),
              zoom: 15,
            ),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Unable to get current location'),
            duration: Duration(seconds: 2),
          ),
        );
      }
    }
  }

  LatLngBounds _fitBoundsForMarkers() {
    final LatLngBounds bounds = _getBounds(_markers);
    mapController!.animateCamera(
      CameraUpdate.newLatLngBounds(bounds, 100),
    );
    return bounds;
  }

  // Reload user data
  void _reloadUserData() {
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      setState(() {
        userEmail = user.email ?? '';
      });

      try {
        final userDoc = await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .get();

        if (userDoc.exists) {
          final userData = userDoc.data()!;
          setState(() {
            displayName = userData['name'] ?? _formatEmailToName(userEmail);
            username = displayName;

            // Get profile image path and last update time
            final newProfilePath = userData['profileImagePath'];
            final lastUpdateStr = userData['profileImageLastUpdated'];

            if (newProfilePath != null && lastUpdateStr != null) {
              final lastUpdate = DateTime.parse(lastUpdateStr);

              // Only update if we have a new image or if this is a fresh load
              if (_profileImagePath != newProfilePath ||
                  _lastProfileUpdate == null ||
                  lastUpdate.isAfter(_lastProfileUpdate!)) {
                _profileImagePath = newProfilePath;
                _lastProfileUpdate = lastUpdate;
                _loadProfilePicture(newProfilePath);
              }
            }
          });
        }
      } catch (e) {
        print('Error fetching user data: $e');
        setState(() {
          displayName = _formatEmailToName(userEmail);
          username = displayName;
        });
      }
    }
  }

  String _formatEmailToName(String email) {
    if (email.isEmpty) return '';

    // Get the part before @ symbol
    String namePart = email.split('@')[0];

    // Split by common separators (dots, underscores, numbers)
    List<String> parts = namePart
        .replaceAll(RegExp(r'[0-9]'), ' ')
        .replaceAll('_', ' ')
        .replaceAll('.', ' ')
        .split(' ')
        .where((part) => part.isNotEmpty)
        .toList();

    // Capitalize each part
    parts = parts.map((part) {
      if (part.isEmpty) return '';
      return part[0].toUpperCase() + part.substring(1).toLowerCase();
    }).toList();

    // Join the parts with a space
    return parts.join(' ');
  }

  Future<void> getUserLocationUpdates() async {
    bool _serviceEnabled;
    loc.PermissionStatus _permissionGranted;

    _serviceEnabled = await _locationController.serviceEnabled();
    if (!_serviceEnabled) {
      _serviceEnabled = await _locationController.requestService();
      if (!_serviceEnabled) {
        return;
      }
    }

    _permissionGranted = await _locationController.hasPermission();
    if (_permissionGranted == loc.PermissionStatus.denied) {
      _permissionGranted = await _locationController.requestPermission();
      if (_permissionGranted != loc.PermissionStatus.granted) {
        return;
      }
    }

    _locationController.onLocationChanged
        .listen((loc.LocationData currentLocation) {
      if (currentLocation.latitude != null &&
          currentLocation.longitude != null) {
        setState(() {
          _currentPosition =
              LatLng(currentLocation.latitude!, currentLocation.longitude!);
        });
        print(_currentPosition);
      }
    });
  }

  void _showLogoutConfirmation(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) => AlertDialog(
        title: const Text('Log out'),
        content: const Text('Are you sure you want to log out?'),
        actions: <Widget>[
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close the dialog
            },
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close the dialog
              _logout();
            },
            child: const Text('Log Out'),
          ),
        ],
      ),
    );
  }

  void _logout() async {
    try {
      await FirebaseAuth.instance.signOut();
      if (!mounted) return;
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const LoginScreen()),
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error logging out: ${e.toString()}')),
        );
      }
    }
  }

  Widget _buildProfileImage() {
    return Container(
      width: 80,
      height: 80,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
      ),
      child: ClipOval(
        child: _imageFile != null
            ? Image.file(
                _imageFile!,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return _defaultProfileImage();
                },
              )
            : _defaultProfileImage(),
      ),
    );
  }

  Widget _defaultProfileImage() {
    return Container(
      color: Colors.grey[300],
      child: Icon(
        Icons.person,
        size: 40,
        color: Colors.grey[600],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      body: Stack(
        children: [
          // Map View
          GoogleMap(
            onMapCreated: (controller) {
              setState(() => mapController = controller);
            },
            initialCameraPosition: _kGooglePlex,
            myLocationEnabled: true,
            myLocationButtonEnabled: false,
            markers: _markers,
            mapType: MapType.normal,
            zoomControlsEnabled: false,
            buildingsEnabled: true,
            trafficEnabled: true,
            tiltGesturesEnabled: true,
            rotateGesturesEnabled: true,
            mapToolbarEnabled:
                true, // Enable the default toolbar for directions
            compassEnabled: false,
          ),
          if (_isLoading)
            Container(
              color: Colors.black54,
              child: const Center(
                child: CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              ),
            ),

          // Search Bar
          Positioned(
            top: 40,
            left: 16,
            right: 16,
            child: Container(
              height: 56,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(28),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.menu),
                    onPressed: () => _scaffoldKey.currentState?.openDrawer(),
                  ),
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(
                        hintText: 'Search here',
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.symmetric(horizontal: 16),
                      ),
                      //          onChanged: _onSearch,
                    ),
                  ),
                  Container(
                    margin: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.grey[200],
                    ),
                    child: IconButton(
                      icon: const Icon(Icons.mic),
                      onPressed: () {
                        // Implement voice search
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),

          // Layer Button
          Positioned(
            top: 120,
            right: 16,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                shape: BoxShape.circle,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: IconButton(
                icon: const Icon(Icons.layers),
                onPressed: () {
                  // Implement layer selection
                },
              ),
            ),
          ),

          // Location Button
          Positioned(
            right: 16,
            bottom: 120,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                shape: BoxShape.circle,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: IconButton(
                icon: const Icon(Icons.my_location),
                onPressed: _centerOnUserLocation,
              ),
            ),
          ),

          // Bottom Navigation
          Positioned(
            left: 0,
            right: 0,
            bottom: 0,
            child: Container(
              color: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 13),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _buildNavButton(
                    true,
                    'Explore',
                    Icons.explore,
                  ),
                  _buildNavButton(
                    false,
                    'Commute',
                    Icons.home_work,
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
      drawer: _buildDrawer(),
    );
  }

  Widget _buildDrawer() {
    return Drawer(
        child: Container(
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          Container(
            padding: const EdgeInsets.only(top: 24),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  const Color.fromARGB(255, 0, 0, 0),
                  const Color.fromARGB(255, 255, 255, 255),
                ],
              ),
            ),
            child: UserAccountsDrawerHeader(
              margin: EdgeInsets.zero,
              decoration: const BoxDecoration(
                color: Color.fromARGB(0, 196, 24, 24),
              ),
              accountName: Text(
                displayName,
                style: const TextStyle(
                  fontSize: 15,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              accountEmail: Text(
                userEmail,
                style: const TextStyle(
                  fontSize: 12,
                  color: Colors.white70,
                ),
              ),
              currentAccountPicture: Hero(
                tag: 'profile_picture',
                child: Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.2),
                        blurRadius: 8,
                        offset: const Offset(0, 3),
                      ),
                    ],
                  ),
                  child: ClipOval(
                    child: _imageFile != null
                        ? Image.file(
                            _imageFile!,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) {
                              return _defaultProfileImage();
                            },
                          )
                        : _defaultProfileImage(),
                  ),
                ),
              ),
            ),
          ),
          ListTile(
            leading: Icon(Icons.person),
            title: Text('Edit Profile'),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => EditProfileScreen(
                    onProfileUpdated: _loadUserData,
                  ),
                ),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.lock),
            title: Text('Change Password'),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ChangePasswordScreen(),
                ),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.mood),
            title: Text('Change Mood Preference'),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => MoodCategoryScreen(),
                ),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.book_sharp),
            title: Text('About'),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => AboutScreen(),
                ),
              );
            },
          ),
          Divider(),
          ListTile(
              leading: Icon(Icons.logout, color: Colors.red),
              title: Text('Logout'),
              onTap: () => _showLogoutConfirmation(
                    context,
                  )),
        ],
      ),
    ));
  }
}

Widget _buildNavButton(bool isSelected, String label, IconData icon) {
  final color = isSelected ? Colors.blue : Colors.grey;
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      Icon(
        icon,
        color: color,
        size: 24,
      ),
      const SizedBox(height: 4),
      Text(
        label,
        style: TextStyle(
          color: color,
          fontSize: 12,
          fontWeight: isSelected ? FontWeight.w500 : FontWeight.normal,
        ),
      ),
    ],
  );
}

// Widget _buildMapTab() {
//   return Stack(
//     children: [
//       GoogleMap(
//         onMapCreated: (GoogleMapController controller) {
//           mapController = controller;
//           _onMapCreated(controller);
//         },
//         initialCameraPosition: _kGooglePlex,
//         markers: _markers,
//         myLocationEnabled: true,
//         myLocationButtonEnabled: false,
//         mapType: MapType.normal,
//         zoomControlsEnabled: false,
//         zoomGesturesEnabled: true,
//         compassEnabled: true,
//         buildingsEnabled: true,
//         trafficEnabled: true,
//         mapToolbarEnabled: true, // Enable the default toolbar for directions
//         rotateGesturesEnabled: true,
//         tiltGesturesEnabled: true,
//       ),
//       if (_isLoading)
//         Container(
//           color: Colors.black54,
//           child: const Center(
//             child: CircularProgressIndicator(
//               valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
//             ),
//           ),
//         ),
//     ],
//   );
// }
